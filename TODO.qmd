
## TODO - Friday AM

- [ ] from SQL get POS sizes for programmes
- [ ] delete entire graph database
- [ ] delete I400 files
- [ ] new ipynb page for each load
- [ ] screencapture I400 again
- [ ] run extract for each programme in list
- [ ] re-render html and pdf
- [ ] review new html/pdf - send/share zip with xiaodong
- [ ] 


## Weekend

- [ ] load remaining programmes
- [ ] research graph explore/query
- [ ] copy all cypher queries to page and annotate
- [ ] add new html pages - 
  - [ ] dedication, 
  - [ ] cypher queries, 
  - [ ] techstack
- [ ] explore graph 
  - [ ] write down interesting questions
  - [ ] screencapture interesting insights
  - [ ] list of things to do
  - [ ] delete unnatttached nodes?

## Later

- [ ] clipchamp for video
- [ ] quarto for presentation?
- [ ] script for video - combination of presentation slides, demo and neo4j capabilities - leave on cliffhanger

## yaml

## overall

* add dedication page/section
* appendix page with all timetable quality queries
* appendix tech stack - python libraries
* appendix supervisor notes/pages
* trim references page
* review data engineering
* write timetable-metrics section
* run exatraction - a couple of programmes (maths, art intel)
* add end-to-end example for I400 -> appendix
* copy all cypher queries to a page
* add pages to html and rerender
* share with xiaodong
* presentation / appendix
  * show slicing/range example
  

### word/pdf doc
* add front page instruction about viewing as a website
* Put page 1 in front of Toc
* refresh toc




## introduction




https://www.sciencedirect.com/science/article/pii/S2667305323000789?via%3Dihub


## graph data & model


## references

* packages/libraries


# 2 minute video

* fix references page not rendering from bib
* review learning outcomes on mod page 
* plan 2 min elevator pitch video:
  * timetables - a necessary evil
  * tell us where to go, why
  * but they are the source of complaints, they are never write, they cause issues, they're wrong.
  * they are complex to produce, difficult to collect data for, difficult to optimise
  * you can never please everyone, if you please anyone you are probably winning
  * but how do we know what is going on - what is good, what is the case
  * reporting in timetabling is challenging - you can count hard/soft constraint violations - examples
  * you can visually inspect a timetable - that looks good - that looks better than that - but why?
  * can it be quantified, can it be scored, can we move away from anecdotal conversations/evidence and individual views and into a more evidence based approach.
  * this project isn't about solving this problem - it's a big one - but it is about taking steps towards that possibility.
  * Timetabling - it is complex - it is relational - it has people (studnets, staff, instructors), resources (rooms, equipment), times (dates, hours, durations), it has curriculum requirements, it has rules and various outcomes to optimise.
  * currently timetables are structured and scheduled using relational databases - that is data organised into tables with relationship tables, primary keys, ids, etc. 







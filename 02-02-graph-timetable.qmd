---
title: Graph Data Model for Timebling
execute: 
  enabled: false
lightbox:
  match: auto
  effect: fade
  desc-position: bottom
  loop: false
   
---

Having discussed some advantages of graph databases for representing interconnected data, this section delves into the specifics of a proposed graph data model tailored for university timetabling.

## An Iterative Approach

The graph data model design was an iterative process: design -> build -> test -> review -> revise -\> ...and repeat. Using Neo4j Desktop, the first model was small scope in scope, incorporating *minimal* nodes and properties. Eventually, the expanded model was created in an cloud-based Neo4j Aura instance.  

## Core Nodes - Building Blocks

At its core, the timetable model revolves around four key entities represented as nodes:


:::{.table}
| Node     | Property    | Description           | Data Type |
|----------|-------------|-----------------------|-----------|
| Student  | firstName   | Legal first name      | string    |
|          | lastName    | Legal last name       | string    |
|          | studentID   | University identifier | integer   |
|          | splusID     | Timetable URN         | string    |
| Lecturer | firstName   | First name            | string    |
|          | lastName    | Last name             | string    |
|          | staffID     | University identifier | integer   |
|          | splusID     | Timetable URN         | string    |
| Room     | name        | Room name             | string    |
|          | splusID     | Timetable URN         | integer   |
| Activity | name        | Activity name         | string    |
|          | description | Activity description  | string    |
|          | startTime   | Scheduled start time  | datetime  |
|          | endTime     | Scheduled end time    | datetime  |
|          | date        | Date of activity      | date      |

:::

![Neo4j Interface showing basic nodes and properties](./images/poc1-import-interface.png){width=75%}

## Relationships - Connecting the Dots

The core nodes are interconnected through relationships that reflect the dynamics of a timetable:

-   Student-**\[IS_ALLOCATED_TO\]**-\>Activity
-   Staff-**\[TEACHES_ON\]**-\>Activity
-   Activity-**\[TAKES_PLACE_IN\]**-\>Room

![Core Nodes and Properties](./images/v1-core-nodes-rels-prop.png){width=75%}

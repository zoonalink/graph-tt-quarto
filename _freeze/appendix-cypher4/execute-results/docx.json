{
  "hash": "a4e8308a8bbd679c9e7b7a5ae0158c33",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Count Queries\"\nlightbox:\n  match: auto\n  effect: fade\n  desc-position: bottom\n  loop: false\n---\n\n\n\n\n\n\nThis page contains a selection of count queries used to explore the graph database. The queries are designed to provide insights into the data and relationships between nodes.  They can be considered starter queries which can be amended depending on the requirements. \n\n### Count all nodes - by label\n\nBelow are two queries returning the same results - counts of nodes by node label.\n\n```{cypher}{.scroll-cypher}\n// Count of nodes - row per node\n\nUNWIND [\"student\", \"staff\", \"room\", \"activity\"] AS label\nMATCH (n)\nWHERE label IN labels(n)\nRETURN label, count(n) AS count\n```\n\n![Count All Nodes](./images/cypher-node-count1.png)\n\n```{cypher}{.scroll-cypher}\n// Count of nodes - single row\n\nMATCH (n:student)\nWITH count(n) AS studentCount\nMATCH (n:staff)\nWITH studentCount, count(n) AS lecturerCount\nMATCH (n:room)\nWITH studentCount, lecturerCount, count(n) AS roomCount\nMATCH (n:activity)\nRETURN studentCount, lecturerCount, roomCount, count(n) AS activityCount\n```\n\n![Count All Nodes](./images/cypher-node-count2.png)\n\n\n### Count all relationships - by type\n\nThe query below returns counts of relationships.  We can see that there are a significant amount of (student)-[]->(activity) relationships due to how we structured `activity` in the graph - that is, a separate node for each instance. \n\n```{cypher}{.scroll-cypher}\n// Count of relationships\n\nMATCH ()-[r:ATTENDS]->()\nWITH count(r) AS attendsCount\nMATCH ()-[r:TEACHES]->()\nWITH attendsCount, count(r) AS teachesCount\nMATCH ()-[r:OCCUPIES]->() \nWITH attendsCount, teachesCount, count(r) AS occupiesCount\nMATCH ()-[r:BELONGS_TO]->()\nRETURN attendsCount, teachesCount, occupiesCount, count(r) AS belongsCount\n```\n\n![Count All Relationships](./images/cypher-rel-count.png)\n\n\n### Activity counts\n\nIn this graph, an `activity` is an instance of an activity, that is, a unique combination of `name`, `date`, `start`, `end`, `location`, `staff`.  It means *a lot* of activities!\n\n```cypher\n// Count of activities\n\nMATCH (a:activity)\nRETURN count(a) AS totalActivities;\n```\n\n```cypher\n// Count of activities on a day\n\nMATCH (a:activity)\nWHERE a.actDayName = \"Wednesday\"\nRETURN DISTINCT count(a) AS wednesdayActivities\n```\n\n```cypher\n\nMATCH (a:activity)\nRETURN DISTINCT a.actDayName AS dayName, count(a) AS activityCount\n```\n\n![](./images/cypher-act-count.png){.gallery-image group=\"cypher-act\"}\n\n![](./images/cypher-act-day-count.png){.gallery-image group=\"cypher-act\"}\n\n![](./images/cypher-act-days-count.png){.gallery-image group=\"cypher-act\"}\n\n<br>\n\n### Activity counts by time\n\nThe query below connects to the graph via python and returns the result - that is, the number of activities which start at 17:00.\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nfrom connect_to_neo4j_db import connect_to_neo4j\nfrom neo4j import GraphDatabase\n\n# connect to Neo4j\ndriver = connect_to_neo4j()\n\n# session\nsession = driver.session()\n\n# run query\nquery = \"\"\"\n// Activity count by time (start)\n\nMATCH (a:activity)\nWHERE a.actStartTime = localtime(\"17:00:00\")\n//AND a.actDayName = \"Wednesday\"\nRETURN count(a) AS activitiesStartingAt5pm\n\"\"\"\nprint(\"Running query...\\n\")\nresult = session.run(query)\nfor record in result:\n    print(record)\n\n# close the session and driver\nsession.close()\ndriver.close()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nConnecting to Neo4j database....\nConnected to Neo4j database successfully! Driver: <neo4j._sync.driver.Neo4jDriver object at 0x000002389B7361D0>\nRunning query...\n\n<Record activitiesStartingAt5pm=172>\n```\n:::\n:::\n\n\n### Staff activity count\n\nThis query returns the first 5 rows of the query which counts activities by member of staff.  \n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nfrom connect_to_neo4j_db import connect_to_neo4j\nfrom neo4j import GraphDatabase\nimport pandas as pd\n\n# connect to Neo4j\ndriver = connect_to_neo4j()\n\n# session\nsession = driver.session()\n\n# run query\nquery = \"\"\"\n// Staff activity count\n\nMATCH (st:staff)-[r:TEACHES]->(a:activity)\nRETURN st.staffFullName_anon AS staffName, count(a) AS activityCount\nORDER BY activityCount DESC\n\"\"\"\nprint(\"Running query...\\n\")\nresult = session.run(query)\n\n# list to hold records\nrecords = []\nfor record in result:\n    records.append(record)\n\n# df of first 5 records\ndf = pd.DataFrame(records[:5], columns=[\"staffName\", \"activityCount\"])\n\n# print\nprint(df)\n\n# close the session and driver\nsession.close()\ndriver.close()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nConnecting to Neo4j database....\nConnected to Neo4j database successfully! Driver: <neo4j._sync.driver.Neo4jDriver object at 0x000002389EB7A050>\nRunning query...\n\n        staffName  activityCount\n0  Debbie Nichols            145\n1  Marc Hernandez            127\n2    Eileen Allen            126\n3    Steven Perez            124\n4  Justin Alvarez            112\n```\n:::\n:::\n\n\n",
    "supporting": [
      "appendix-cypher4_files\\figure-docx"
    ],
    "filters": []
  }
}
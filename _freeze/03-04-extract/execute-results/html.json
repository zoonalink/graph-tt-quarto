{
  "hash": "d78bf9a2d2d51ab815c27a4b4832f704",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Extraction\"\n---\n\n\n\n\n:::{.callout-warning}\n## TODO\n\n* \n:::\n\n\n\n\n\n```{dot}\ndigraph extract {\n    //  top to bottom\n    rankdir = TD;\n    nodesep = 1.0;\n    splines = false;\n    \n    // node styles\n    node [shape=box, style=\"filled,rounded\", fillcolor=\"#f0f0f0\", fontname=\"Arial\"];\n    edge [fontname=\"Arial\"];\n    \n    // nnodes\n    A [label=\"SQL Database\\n(students, staff, programmes,\\nactivities, rooms, etc.)\", shape=cylinder, fillcolor=\"#ffc0cb\"];\n    B [label=\"CSV Files\\n(./{hostkeys}/extract)\"];\n    extract [label=\"𝗘𝗫𝗧𝗥𝗔𝗖𝗧\", style=\"filled\", fillcolor=\"#e0f0e0\"];\n    keyring [label=\"Keyring\\n(Credentials)\", shape=component, fillcolor=\"#ffffcc\"];\n    config [label=\"Configuration\"];\n    \n    // edges and labels\n    A -> keyring [label=\"Requires\"];\n    keyring -> extract;\n    extract -> B;\n    config -> keyring [label=\"Credentials\"];\n    config -> extract [label=\"SQL Scripts\"];\n    \n    // force keyring and config on the same level\n    { rank = same; keyring; config; }\n}\n```\n\n\n\n<figcaption>Extract</figcaption>\n\n\n## Extraction Process\n\nThe extraction process starts by securely connecting to the specified SQL database using encrypted credentials stored with [keyring](https://pypi.org/project/keyring/).  The combination of `configuration` and `SQL scripts` determine which data will be extracted by filtering based on programme(s) of study and specifying which nodes, relationships and properties to extract.\n\nThe process performs basic validation at every step ensuring secure connection before running SQL SELECT statements and storing extracted data as csv files locally.\n\n::: {#22495d30 .cell execution_count=1}\n``` {.python .cell-code}\n# extract_main.py\nfrom logger_config import extract_logger\nfrom extract_data import main as extract_main\nfrom config import EXTRACT_DIR, HOSTKEYS, CHUNK_SIZE\nfrom utils import execution_times\n\ndef run_extraction():\n    extract_logger.info(\"Starting data extraction process\")\n    extract_logger.info(f\"Output Directory: {EXTRACT_DIR}\")\n    extract_logger.info(f\"Hostkeys: {HOSTKEYS}\")\n    extract_logger.info(f\"Chunksize: {CHUNK_SIZE}\")\n\n    try:\n        extract_main()\n    except Exception as e:\n        extract_logger.exception(\"An error occurred during data extraction:\")\n    finally:\n        extract_logger.info(\"Data extraction completed.\")\n\n   \n    # Log the execution times\n    extract_logger.info(\"Extraction Time Summary:\")\n    for func_name, exec_time in execution_times.items():\n        extract_logger.info(f\"Function {func_name} took {exec_time:.2f} seconds\")\n\n\nif __name__ == \"__main__\":\n    run_extraction()\n```\n:::\n\n\n",
    "supporting": [
      "03-04-extract_files"
    ],
    "filters": [],
    "includes": {}
  }
}
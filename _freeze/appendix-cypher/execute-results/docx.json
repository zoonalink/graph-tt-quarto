{
  "hash": "f606b1fa02d351abef674041f371d7bd",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Cypher Queries\"\n---\n\n\n\n\n\n\n<br> These pages collate Cypher[^1] queries used in the development of this project. The queries are grouped by the type of operation they perform, such as creating nodes, relationships, or querying the graph. The queries are presented in a format that can be copied and pasted directly into a Neo4j browser or other Cypher-compatible interface.\n\n[^1]: \"**Cypher** is a declarative graph query language that allows for expressive and efficient data querying in a property graph\" (Wikipedia contributors, 2024)\n\nThey represent a *starting point* for further exploration and development of the graph database. The queries are not exhaustive, and there are many more possibilities for querying and analysing the data.\n\n## Constraints\n\nConstraints in Neo4j are used to enforce rules on the graph data, such as ensuring that certain properties are unique or that nodes have specific properties. Constraints can be used to maintain data integrity and prevent duplicate or inconsistent data. For example, we would want to enforce uniqueness constraints on most nodes and relationships, so that we do not duplicate students or allocations, etc.\n\n![Constraints](./images/cypher-constraint.png)\n\n## Indexes\n\nIndexes in Neo4j are used to speed up queries by allowing the database to quickly locate nodes or relationships based on a property value.  They will depend heavily on graph structure and specific use-cases.  For example, if performing regular searches on `(activity{actStartTime})` it is probably beneficial to create an index on this property.\n\nSearch performance indexes include `RANGE`, `FULLTEXT`, and `POINT`. Range indexes are the default and support most queries. Text indexes, like `FULLTEXT`, are used for `string` based searches and optimised for queries containing operators like `CONTAINS` or `STARTS WITH`. Point indexes are used for spatial queries and are optimised for `latitude` and `longitude` properties.\n\n**Indexes in Graph**\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nfrom connect_to_neo4j_db import connect_to_neo4j\nfrom neo4j import GraphDatabase\n\n# connect to Neo4j\ndriver = connect_to_neo4j()\n\n# session\nsession = driver.session()\n\n# run query\nquery = \"\"\"\nSHOW INDEXES;\n\"\"\"\nprint(\"Running query...\\n\")\nresult = session.run(query)\nfor record in result:\n    print(record)\n\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nConnecting to Neo4j database....\nConnected to Neo4j database successfully! Driver: <neo4j._sync.driver.Neo4jDriver object at 0x00000137D0AB1190>\nRunning query...\n\n<Record id=7 name='activity_clash_index' state='ONLINE' populationPercent=100.0 type='RANGE' entityType='NODE' labelsOrTypes=['activity'] properties=['actStartDate', 'actStartTime', 'actEndTime'] indexProvider='range-1.0' owningConstraint=None lastRead=None readCount=0>\n<Record id=19 name='graphid_demoRoom_uniq' state='ONLINE' populationPercent=100.0 type='RANGE' entityType='NODE' labelsOrTypes=['demoRoom'] properties=['graphid'] indexProvider='range-1.0' owningConstraint='graphid_demoRoom_uniq' lastRead=neo4j.time.DateTime(2024, 8, 20, 18, 16, 44, 231000000, tzinfo=<UTC>) readCount=3>\n<Record id=4 name='index_12b79beb' state='ONLINE' populationPercent=100.0 type='RANGE' entityType='NODE' labelsOrTypes=['activity'] properties=['actEndTime'] indexProvider='range-1.0' owningConstraint=None lastRead=None readCount=0>\n<Record id=6 name='index_207d313' state='ONLINE' populationPercent=100.0 type='RANGE' entityType='NODE' labelsOrTypes=['activity'] properties=['id'] indexProvider='range-1.0' owningConstraint=None lastRead=None readCount=0>\n<Record id=8 name='index_241bd22f' state='ONLINE' populationPercent=100.0 type='RANGE' entityType='NODE' labelsOrTypes=['room'] properties=['roomName'] indexProvider='range-1.0' owningConstraint=None lastRead=neo4j.time.DateTime(2024, 8, 21, 12, 10, 21, 129000000, tzinfo=<UTC>) readCount=152>\n<Record id=9 name='index_2d375d70' state='ONLINE' populationPercent=100.0 type='RANGE' entityType='NODE' labelsOrTypes=['room'] properties=['roomLatitude'] indexProvider='range-1.0' owningConstraint=None lastRead=neo4j.time.DateTime(2024, 8, 15, 18, 40, 6, 645000000, tzinfo=<UTC>) readCount=107>\n<Record id=0 name='index_343aff4e' state='ONLINE' populationPercent=100.0 type='LOOKUP' entityType='NODE' labelsOrTypes=None properties=None indexProvider='token-lookup-1.0' owningConstraint=None lastRead=neo4j.time.DateTime(2024, 8, 21, 12, 8, 48, 160000000, tzinfo=<UTC>) readCount=117812>\n<Record id=10 name='index_43c5c824' state='ONLINE' populationPercent=100.0 type='RANGE' entityType='NODE' labelsOrTypes=['room'] properties=['roomLongitude'] indexProvider='range-1.0' owningConstraint=None lastRead=neo4j.time.DateTime(2024, 8, 15, 18, 40, 6, 646000000, tzinfo=<UTC>) readCount=106>\n<Record id=2 name='index_6acb9a84' state='ONLINE' populationPercent=100.0 type='RANGE' entityType='NODE' labelsOrTypes=['activity'] properties=['actStartDate'] indexProvider='range-1.0' owningConstraint=None lastRead=neo4j.time.DateTime(2024, 8, 21, 9, 9, 7, 681000000, tzinfo=<UTC>) readCount=116>\n<Record id=5 name='index_7ade165f' state='ONLINE' populationPercent=100.0 type='RANGE' entityType='NODE' labelsOrTypes=['activity'] properties=['actModSplusID'] indexProvider='range-1.0' owningConstraint=None lastRead=neo4j.time.DateTime(2024, 8, 15, 18, 40, 6, 638000000, tzinfo=<UTC>) readCount=148>\n<Record id=1 name='index_f7700477' state='ONLINE' populationPercent=100.0 type='LOOKUP' entityType='RELATIONSHIP' labelsOrTypes=None properties=None indexProvider='token-lookup-1.0' owningConstraint=None lastRead=neo4j.time.DateTime(2024, 8, 15, 13, 53, 33, 557000000, tzinfo=<UTC>) readCount=134>\n<Record id=3 name='index_f86013e' state='ONLINE' populationPercent=100.0 type='RANGE' entityType='NODE' labelsOrTypes=['activity'] properties=['actStartTime'] indexProvider='range-1.0' owningConstraint=None lastRead=neo4j.time.DateTime(2024, 8, 21, 9, 8, 41, 307000000, tzinfo=<UTC>) readCount=18>\n<Record id=18 name='lat_demoRoom' state='ONLINE' populationPercent=100.0 type='RANGE' entityType='NODE' labelsOrTypes=['demoRoom'] properties=['lat'] indexProvider='range-1.0' owningConstraint=None lastRead=None readCount=0>\n<Record id=17 name='lon_demoRoom' state='ONLINE' populationPercent=100.0 type='RANGE' entityType='NODE' labelsOrTypes=['demoRoom'] properties=['lon'] indexProvider='range-1.0' owningConstraint=None lastRead=None readCount=0>\n<Record id=16 name='rm_cat_demoRoom' state='ONLINE' populationPercent=100.0 type='RANGE' entityType='NODE' labelsOrTypes=['demoRoom'] properties=['rm_cat'] indexProvider='range-1.0' owningConstraint=None lastRead=neo4j.time.DateTime(2024, 8, 20, 18, 16, 44, 250000000, tzinfo=<UTC>) readCount=3>\n<Record id=15 name='rm_type_demoRoom' state='ONLINE' populationPercent=100.0 type='RANGE' entityType='NODE' labelsOrTypes=['demoRoom'] properties=['rm_type'] indexProvider='range-1.0' owningConstraint=None lastRead=neo4j.time.DateTime(2024, 8, 20, 18, 16, 44, 258000000, tzinfo=<UTC>) readCount=3>\n<Record id=11 name='room_fulltext_index' state='ONLINE' populationPercent=100.0 type='FULLTEXT' entityType='NODE' labelsOrTypes=['room'] properties=['roomName', 'roomDescription', 'roomType', 'roomCapacity'] indexProvider='fulltext-1.0' owningConstraint=None lastRead=neo4j.time.DateTime(2024, 8, 20, 18, 16, 43, 786000000, tzinfo=<UTC>) readCount=99>\n<Record id=12 name='room_geo_index' state='ONLINE' populationPercent=100.0 type='FULLTEXT' entityType='NODE' labelsOrTypes=['room'] properties=['roomLatitude', 'roomLongitude'] indexProvider='fulltext-1.0' owningConstraint=None lastRead=neo4j.time.DateTime(2024, 8, 20, 18, 16, 43, 803000000, tzinfo=<UTC>) readCount=12>\n```\n:::\n:::\n\n\n### Creating Indexes\n\nThis is the general syntax for creating an INDEX and some examples. \n\n```{cypher}{.scroll-cypher}\n// General syntax\nCREATE INDEX FOR (n:NodeLabel) ON (n.propertyName)\n\n// Examples\nCREATE INDEX FOR (a:activity) ON (a.actStartDate);\nCREATE INDEX FOR (a:activity) ON (a.actStartTime);\nCREATE INDEX FOR (a:activity) ON (a.actEndTime);\nCREATE INDEX FOR (a:activity) ON (a.actModSplusID);\nCREATE INDEX FOR (a:activity) ON (a.id);\n// composite index for clashes\nCREATE INDEX activity_clash_index FOR (a:activity) ON (a.actStartDate, a.actStartTime, a.actEndTime);\n\nCREATE INDEX FOR (r:room) ON (r.roomName);\nCREATE INDEX FOR (r:room) ON (r.roomLatitude);\nCREATE INDEX FOR (r:room) ON (r.roomLongitude);\n\nCREATE SPATIAL INDEX room_location_index FOR (r:demoRoom) ON (r.location)\nCREATE SPATIAL INDEX demoroom_location_index FOR (r:room) ON (r.location)\n```\n\n",
    "supporting": [
      "appendix-cypher_files\\figure-docx"
    ],
    "filters": []
  }
}
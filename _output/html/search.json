[
  {
    "objectID": "06-conclusion.html",
    "href": "06-conclusion.html",
    "title": "Conclusion",
    "section": "",
    "text": "Summary of key achievements\nReflection on the project’s impact and potential for timetabling processes\nFuture work and recommendations"
  },
  {
    "objectID": "06-conclusion.html#conclusion-500-words",
    "href": "06-conclusion.html#conclusion-500-words",
    "title": "Conclusion",
    "section": "",
    "text": "Summary of key achievements\nReflection on the project’s impact and potential for timetabling processes\nFuture work and recommendations"
  },
  {
    "objectID": "04-timetable-metrics.html",
    "href": "04-timetable-metrics.html",
    "title": "Timetable Metrics",
    "section": "",
    "text": "Constraint violations (max hours per day, days per week, lunch breaks, etc.)\nDistance-based metrics using room properties\n\n\n\n\n\nStudent-level, programme-level, and other relevant groupings\n\n\n\n\n\nExample queries with explanations\n\n\n\n\n\nBloom visualisations or other relevant charts"
  },
  {
    "objectID": "04-timetable-metrics.html#timetable-quality-metrics-and-insights-1500-2000-words",
    "href": "04-timetable-metrics.html#timetable-quality-metrics-and-insights-1500-2000-words",
    "title": "Timetable Metrics",
    "section": "",
    "text": "Constraint violations (max hours per day, days per week, lunch breaks, etc.)\nDistance-based metrics using room properties\n\n\n\n\n\nStudent-level, programme-level, and other relevant groupings\n\n\n\n\n\nExample queries with explanations\n\n\n\n\n\nBloom visualisations or other relevant charts"
  },
  {
    "objectID": "02-data-engineering.html",
    "href": "02-data-engineering.html",
    "title": "Data Engineering",
    "section": "",
    "text": "High-level architecture (data flow diagram)\nKey features: modularity, configurability, scalability, error handling\n\n\n\n\n\nBrief overview of SQL extraction techniques\n\n\n\n\n\nDetailed discussion of the Python-based transformation process\nHighlight of the anonymisation function\nDiscussion on safeguarding personal identifiable information\n\n\n\n\n\nChallenges and solutions with Neo4j Aura\nCloud vs. desktop considerations\n\n\n\n\n\nEnd-to-end automated process for specific programme data\n\n\n\n\n\nReflection on the agile approach and discoveries made during development\nPotential future enhancements, developments"
  },
  {
    "objectID": "02-data-engineering.html#data-engineering-an-end-to-end-solution-1500-2000-words",
    "href": "02-data-engineering.html#data-engineering-an-end-to-end-solution-1500-2000-words",
    "title": "Data Engineering",
    "section": "",
    "text": "High-level architecture (data flow diagram)\nKey features: modularity, configurability, scalability, error handling\n\n\n\n\n\nBrief overview of SQL extraction techniques\n\n\n\n\n\nDetailed discussion of the Python-based transformation process\nHighlight of the anonymisation function\nDiscussion on safeguarding personal identifiable information\n\n\n\n\n\nChallenges and solutions with Neo4j Aura\nCloud vs. desktop considerations\n\n\n\n\n\nEnd-to-end automated process for specific programme data\n\n\n\n\n\nReflection on the agile approach and discoveries made during development\nPotential future enhancements, developments"
  },
  {
    "objectID": "01-introduction.html",
    "href": "01-introduction.html",
    "title": "Introduction",
    "section": "",
    "text": "Background on university timetabling challenges\nMotivation for exploring graph-based approaches\nProject scope and objectives"
  },
  {
    "objectID": "01-introduction.html#intro-500-words",
    "href": "01-introduction.html#intro-500-words",
    "title": "Introduction",
    "section": "",
    "text": "Background on university timetabling challenges\nMotivation for exploring graph-based approaches\nProject scope and objectives"
  },
  {
    "objectID": "03-graph-data-model.html",
    "href": "03-graph-data-model.html",
    "title": "Graph Data Model",
    "section": "",
    "text": "Visual representation of both models - mermaid, or simmilar\n\n\n\n\n\n\n\n\nRoom properties example (lat, long)\nPotential for additional data integration (curriculum, student outcomes, etc.)"
  },
  {
    "objectID": "03-graph-data-model.html#graph-data-model-for-timetabling-1000-words",
    "href": "03-graph-data-model.html#graph-data-model-for-timetabling-1000-words",
    "title": "Graph Data Model",
    "section": "",
    "text": "Visual representation of both models - mermaid, or simmilar\n\n\n\n\n\n\n\n\nRoom properties example (lat, long)\nPotential for additional data integration (curriculum, student outcomes, etc.)"
  },
  {
    "objectID": "05-future-opportunities.html",
    "href": "05-future-opportunities.html",
    "title": "Future Opportunities",
    "section": "",
    "text": "Discussion of potential analyses (module combinations, student clustering, etc.)\nIntegration of additional data sources"
  },
  {
    "objectID": "05-future-opportunities.html#future-opportunities-and-potential-insights-500-words",
    "href": "05-future-opportunities.html#future-opportunities-and-potential-insights-500-words",
    "title": "Future Opportunities",
    "section": "",
    "text": "Discussion of potential analyses (module combinations, student clustering, etc.)\nIntegration of additional data sources"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Exploring Graph Data Models for Timetabling Insights",
    "section": "",
    "text": "This is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites."
  },
  {
    "objectID": "03-data-engineering.html",
    "href": "03-data-engineering.html",
    "title": "Data Engineering",
    "section": "",
    "text": "The data engineering pipeline is designed to efficiently and securely transfer selected university timetabling data from a relational database (MS SQL) to a graph database (Neo4j), enabling advanced analytics and insights.\nThis section provides an overview of the pipeline architecture, key design principles, and implementation approach.\n\n\nThe data pipeline consists of several key stages:\n\nExtraction: Data is extracted from the SQL database and saved into CSV files.\nTransformation: The CSV files are processed, cleaned, transformed, merged, and anonymised using Python code.\nIntermediate Storage: Processed CSVs are saved locally and uploaded to Google Drive (required for Neo4j Aura free instance).\nLoading: Clean data is processed and loaded into Neo4j.\n\n\n\n\n\n\n\n\n\n\n\nOverview\n\n\ncluster_D_E\n\n\n\nA\n\n\nSQL Database\n\n\n\nB\n\nCSV Files\n\n\n\nA-&gt;B\n\n\n 1. 𝗘𝗫𝗧𝗥𝗔𝗖𝗧: filter\n\n\n\nC\n\nProcessed CSV Files\n\n\n\nB-&gt;C\n\n\n 2. 𝗧𝗥𝗔𝗡𝗦𝗙𝗢𝗥𝗠: Validate, Process & Anonymise\n\n\n\nD\n\nGoogle Drive\n\n\n\nC-&gt;D\n\n\n 3. 𝐔𝐏𝐋𝐎𝐀𝐃\n\n\n\nE\n\n\nNeo4j Aura DB\n\n\n\n\nD:w-&gt;E\n\n\n 4. Load Schema\n\n\n\nD:e-&gt;E\n\n\n 5. 𝗟𝗢𝗔𝗗: Load & Validate Data\n\n\n\n\n\n\n\n\n\nData Pipeline Overview\n\n\n\nFigure 1\n\n\n\n\n\n\nThis pipeline represents a comprehensive approach to data engineering, incorporating several best practices in data handling, processing, and database management.\n\n\n\nDesign Principles\n\n\nThe data pipeline is built on several core design principles. I started with a strong sense of what I wanted to achieve - a modular, scalable, secure and configurable design - however, what exactly this meant was discovered in the development process. Given that the project has several limitations including resources, technology and is also time-constrained, it was important to make the final result one which can be built upon and potentially be developed within operational contexts. However, the project is also a proof-of-concept and as such, some design opportunities were eschewed in favour of simplicity and progress.\n\n\n\n\nSecure access controls\nData anonymisation\nControlled handling of personally identifiable information\n\n\n\n\n\n\nDistinct, interoperable modules (extract, transform, load)\nAbility to handle increased data volume and complexity\nAutomation, where possible\nConfigurable data processing options (e.g., data chunking, row processing)\nOptimised, where possible\n\n\n\n\n\n\nRobust error handling mechanisms\nComprehensive logging for troubleshooting and auditing\n\n\n\n\n\n\nFlexible configuration options for data filtering, directory controls, and schema handling\n\n\n\n\n\nThe pipeline was developed using an iterative approach, allowing for continuous discovery, refinement and improvement.\nKey aspects of the implementation include:\n\nTechnology Stack: Python for data processing, MS SQL for source data, Neo4j for the target graph database. See Appendix for more details.\nCloud Integration: Utilisation of Google Drive for intermediate storage, compatible with Neo4j Aura.\nValidation: Implemented at various stages to ensure data integrity and fitness for processing.\nTesting: Continuous simulated unit testing to ensure that componentsare behaving as expected.\n\n\n\n\nThe following sections will delve into the specific implementation details of each stage in the pipeline, demonstrating how these principles are put into practice.\nI will explore the iterative development process, configuration management, extraction techniques, transformation processes, loading strategies, and automation workflows. Finally, I will reflect on lessons learned and potential future enhancements to the data engineering components."
  },
  {
    "objectID": "03-data-engineering.html#overview-of-the-data-pipeline",
    "href": "03-data-engineering.html#overview-of-the-data-pipeline",
    "title": "Data Engineering",
    "section": "",
    "text": "The data engineering pipeline is designed to efficiently and securely transfer selected university timetabling data from a relational database (MS SQL) to a graph database (Neo4j), enabling advanced analytics and insights.\nThis section provides an overview of the pipeline architecture, key design principles, and implementation approach.\n\n\nThe data pipeline consists of several key stages:\n\nExtraction: Data is extracted from the SQL database and saved into CSV files.\nTransformation: The CSV files are processed, cleaned, transformed, merged, and anonymised using Python code.\nIntermediate Storage: Processed CSVs are saved locally and uploaded to Google Drive (required for Neo4j Aura free instance).\nLoading: Clean data is processed and loaded into Neo4j.\n\n\n\n\n\n\n\n\n\n\n\nOverview\n\n\ncluster_D_E\n\n\n\nA\n\n\nSQL Database\n\n\n\nB\n\nCSV Files\n\n\n\nA-&gt;B\n\n\n 1. 𝗘𝗫𝗧𝗥𝗔𝗖𝗧: filter\n\n\n\nC\n\nProcessed CSV Files\n\n\n\nB-&gt;C\n\n\n 2. 𝗧𝗥𝗔𝗡𝗦𝗙𝗢𝗥𝗠: Validate, Process & Anonymise\n\n\n\nD\n\nGoogle Drive\n\n\n\nC-&gt;D\n\n\n 3. 𝐔𝐏𝐋𝐎𝐀𝐃\n\n\n\nE\n\n\nNeo4j Aura DB\n\n\n\n\nD:w-&gt;E\n\n\n 4. Load Schema\n\n\n\nD:e-&gt;E\n\n\n 5. 𝗟𝗢𝗔𝗗: Load & Validate Data\n\n\n\n\n\n\n\n\n\nData Pipeline Overview\n\n\n\nFigure 1\n\n\n\n\n\n\nThis pipeline represents a comprehensive approach to data engineering, incorporating several best practices in data handling, processing, and database management.\n\n\n\nDesign Principles\n\n\nThe data pipeline is built on several core design principles. I started with a strong sense of what I wanted to achieve - a modular, scalable, secure and configurable design - however, what exactly this meant was discovered in the development process. Given that the project has several limitations including resources, technology and is also time-constrained, it was important to make the final result one which can be built upon and potentially be developed within operational contexts. However, the project is also a proof-of-concept and as such, some design opportunities were eschewed in favour of simplicity and progress.\n\n\n\n\nSecure access controls\nData anonymisation\nControlled handling of personally identifiable information\n\n\n\n\n\n\nDistinct, interoperable modules (extract, transform, load)\nAbility to handle increased data volume and complexity\nAutomation, where possible\nConfigurable data processing options (e.g., data chunking, row processing)\nOptimised, where possible\n\n\n\n\n\n\nRobust error handling mechanisms\nComprehensive logging for troubleshooting and auditing\n\n\n\n\n\n\nFlexible configuration options for data filtering, directory controls, and schema handling\n\n\n\n\n\nThe pipeline was developed using an iterative approach, allowing for continuous discovery, refinement and improvement.\nKey aspects of the implementation include:\n\nTechnology Stack: Python for data processing, MS SQL for source data, Neo4j for the target graph database. See Appendix for more details.\nCloud Integration: Utilisation of Google Drive for intermediate storage, compatible with Neo4j Aura.\nValidation: Implemented at various stages to ensure data integrity and fitness for processing.\nTesting: Continuous simulated unit testing to ensure that componentsare behaving as expected.\n\n\n\n\nThe following sections will delve into the specific implementation details of each stage in the pipeline, demonstrating how these principles are put into practice.\nI will explore the iterative development process, configuration management, extraction techniques, transformation processes, loading strategies, and automation workflows. Finally, I will reflect on lessons learned and potential future enhancements to the data engineering components."
  },
  {
    "objectID": "02-graph-data-model.html",
    "href": "02-graph-data-model.html",
    "title": "Graph Data Model",
    "section": "",
    "text": "Visual representation of both models - mermaid, or simmilar\n\n\n\n\n\n\n\n\nRoom properties example (lat, long)\nPotential for additional data integration (curriculum, student outcomes, etc.)"
  },
  {
    "objectID": "02-graph-data-model.html#graph-data-model-for-timetabling-1000-words",
    "href": "02-graph-data-model.html#graph-data-model-for-timetabling-1000-words",
    "title": "Graph Data Model",
    "section": "",
    "text": "Visual representation of both models - mermaid, or simmilar\n\n\n\n\n\n\n\n\nRoom properties example (lat, long)\nPotential for additional data integration (curriculum, student outcomes, etc.)"
  },
  {
    "objectID": "03-data-engineering.html#notes-to-delete",
    "href": "03-data-engineering.html#notes-to-delete",
    "title": "Data Engineering",
    "section": "NOTES TO DELETE",
    "text": "NOTES TO DELETE\n\nHigh-level architecture (data flow diagram)\nKey features: modularity, configurability, scalability, error handling"
  },
  {
    "objectID": "03-data-engineering.html#iterative-development-approach",
    "href": "03-data-engineering.html#iterative-development-approach",
    "title": "Data Engineering",
    "section": "3.2 Iterative Development Approach",
    "text": "3.2 Iterative Development Approach\nI followed an interative, agile-inspired approach when developing the data pipeline, despite being a team of one. This allowed for flexibility, continuous improvement and the opportunity to adapt to new insights during the process. The bulk of my effort was spent prototyping, testing and reviewing with each iteration resulting in a new challenge, issue, opportunity or occasionally, success.\n\n\n\nIterative Development Approach\n\n\n\n3.2.1 Initial Planning and Requirements Gathering\nThe development cycle began with initial high-level planning and requirements gathering, where I imagined how each stage should work, trying to bear in mind future-proofing and repeatability principles.\nI defined core functionality for each module (extraction, transformation, loading) adn outlined initial technical requirements and constraints. The planning documentation was maintained in Quarto and markdown files in a centralised repository for project information.\n\n\n3.2.2 Prototyping\nFollowing the initial planning, rapid prototyping was undertaken for each module:\n\nSQL prototyping for data extraction queries\nPython prototyping for data transformation and processing logic\nNeo4j prototyping for graph database schema and loading procedures\n\nThis stage allowed for quick exploration of different approaches and early identification of potential challenges as well as giving me the confidence to continue with my exploration.\n\n\n3.2.3 Component-Based Development and Testing\nDevelopment proceeded with a focus on individual components:\n\nEach module (extraction, transformation, loading) was developed separately\nAn iterative, component-based testing approach was employed\nWhile formal unit tests were not always created, each component was thoroughly tested for functionality\n\nThis approach allowed for rapid progress while maintaining a focus on component-level quality. It was during this phase that I started expanding configuration, logging and error-handling options.\n\n\n3.2.4 Integration and Review\nAs components reached a stable state, they were integrated and reviewed:\n\nComponents were combined to form larger functional units\nIntegrated functionality was occasioanlly demonstrated to subject matter experts (operational timetablers)\nFeedback was gathered on functionality, usability, and alignment with requirements\n\n\n\n3.2.5 Feedback Integration and Iteration\nInsights gained from reviews and ongoing development were fed back into the process:\n\nNew requirements or modifications were documented, for example updates to SQL SELECT statements and data model interpretations.\nThe planning stage was revisited to incorporate new information.\nThe development cycle was repeated, focusing on areas needing improvement or new functionality.\nDecisions were made to park some development opportunities for the future.\n\n\n\n3.2.6 Version Validation and Documentation\nAt key milestones, when a stable version was achieved:\n\nEnd-to-end validation of the entire pipeline was performed.\nResults were documented in notebooks, including opportunities for improvement.\nAny issues identified were logged for the next iteration.\n\n\n\n3.2.7 Continuous Learning and Adaptation\nThroughout the development process, learning and adaptation became central to the project’s evolution. Each iteration brought new insights, often through trial and error. Early challenges included the need to modularise components before they became unmanageable, resisting the temptation to make overly ambitious changes, and recognising when refactoring was necessary. These experiences underscored the importance of incremental progress and consistent testing in maintaining project stability and direction.\nThis iterative journey was far from linear. There were many moments of frustration, periods of painstaking troubleshooting, and the constant urge to overdeliver, sometimes exceeding the original proof-of-concept scope. Yet, with each stumble and course correction, the process itself became more refined, transforming into a powerful tool for identifying and resolving issues.\nWhile the core MVP (minimum viable product) requirements remained relatively stable (I set them after all), the iterative approach empowered me to seize opportunities for enhancement. Each chance to modularise, parameterise, or fine-tune sparked an almost compulsive drive for improvement, pushing the pipeline beyond its initial scope. This dedication to continuous refinement, while time-consuming, ultimately fostered a robust, flexible solution that could adapt gracefully to unforeseen challenges and embrace future opportunities.\nIt also meant the the proportion of overall emphasis shifted slightly from exploring Neo4j insights towards the development of a comprenhensive data engineering solution - entirely by virtue of where I spent my time.\nThe iterative approach proved to be more than just a development methodology. It facilitated personal growth, enhanced technical skills, and improved project management capabilities. This process emphasized the importance of persistence, learning from mistakes, and continual improvement in creating an effective data engineering solution. While challenging at times, this approach ultimately led to a more robust and flexible final product."
  },
  {
    "objectID": "03-data-engineering.html#configuration-and-logging",
    "href": "03-data-engineering.html#configuration-and-logging",
    "title": "Data Engineering",
    "section": "3.3 Configuration and Logging",
    "text": "3.3 Configuration and Logging\n\n3.3.1 Approach\nThe configuration and logging approach has been based on centralising configuration parameters into a python script and it has been organised into sections to manage the different aspects of the ETL pipeline:\n[CHANGE IF YAML BASED APPROACHED FINISH, ELSE UPDATE FUTURE DEV]\n\n\n3.3.2 Main Configuration options\n\nGeneral\n\nhostkeys: list of programme codes for filtering at extract and naming folders\nfolder_name:name for organising directories; default = hostkeys\n\nFilepaths and Directories\n\nroot_dir: project root directory; default = current working directory\nnodes_folder_url, relationships_folder_url: Google Drive URLs to override dynamic data location, if needed\ngdrive_root_folder_url, gdrive_folder_name: Google Drive for storing processed data - shared root folder\ngoogle_credentials_path: Path to the Google service account credentials file.\ndepartment_source, archibus_source: Paths to source data files to augment extracted data.\n\nData Processing\n\nchunk_size: number of rows to process during SQL extraction\ntemp_table_sql_files: SQL script files\nnode_output_filename_template, rel_output_filename_template: Templates for output file names.\n\nneo4j\n\nSchema configuration options (dynamic or custom).\nbatch_size: Batch size for loading data into Neo4j.\n\nnodes, relationships:\n\nDetailed configuration for each node and relationship type, including file patterns, column mappings, data types, and more.\n\ndata_type_mapping, display_name_mapping\n\nMappings to customise how specific data types are handled and displayed.\n\nLogging\n\nSeparate loggers for:\n\nextract\nprocess\nload\ngdrive\n\nLog level configurable: Controls the verbosity of logging (DEBUG, INFO, WARNING, ERROR, CRITICAL)\nCustom timeit function to log time elapsed"
  },
  {
    "objectID": "03-data-engineering.html#extraction-process",
    "href": "03-data-engineering.html#extraction-process",
    "title": "Data Engineering",
    "section": "3.4 Extraction Process",
    "text": "3.4 Extraction Process\n\nBrief overview of SQL extraction techniques\nData Sources\nCode snippet\n\n\nnotes to include:\n\ninformation security\ncontrolled access\nsecure university databases, windows system user, servers\nanonymisation protocol - minimal personal information, still want operatinalisable tool\nreusability, maintainability, testability\nmore data -&gt; scale\nmore data -&gt; properties, relationships\nsql code changes\ngoogle drive apis\nerror handling\nconsistent logging\nvalidation data\n\n\n\n3.5 Transformation and Processing\n\nData cleaning and preproessing\nDetailed discussion of the Python-based transformation process\nHighlight of the anonymisation function\nDiscussion on safeguarding personal identifiable information\n\n\n\n3.4 Loading to Graph Database\n\nDatabase schema\nLoading process\nChallenges and solutions with Neo4j Aura\nCloud vs. desktop considerations\n\n\n\n3.5 Automation and Workflow\n\nEnd-to-end automated process for specific programme data\n\n\n\n3.6 Refelction and Lessons Learned\n\nReflection on the agile approach and discoveries made during development\nBest practices discovered\nChallenges over come\nPotential future enhancements, developments"
  }
]